"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[979],{99028:e=>{e.exports=JSON.parse('{"functions":[{"name":"disablenative","desc":"Disables the execution of native generated code for the provided function.\\n\\n:::tip Hooking functions\\nYou may need to call this function in the future before hooking functions!\\n:::\\n    ","params":[{"name":"fn","desc":"The function to disable native code execution for.","lua_type":"(T...) -> U..."}],"returns":[],"function_type":"static","errors":[{"lua_type":"VM is not supported","desc":"The VM does not support native code."},{"lua_type":"the function is present on the callstack","desc":"The function is present on the current threads callstack. You cannot disable native code for a function that is currently being executed."}],"source":{"line":21,"path":"impl/Libraries/runtime.luau"}},{"name":"enablenative","desc":"Enables the execution of native generated code, if the Lua(u) VM is prepared for it.","params":[{"name":"fn","desc":"The function to enable native code execution for.","lua_type":"(T...) -> U..."}],"returns":[],"function_type":"static","errors":[{"lua_type":"VM is not supported","desc":"The VM does not support native code."}],"source":{"line":31,"path":"impl/Libraries/runtime.luau"}},{"name":"isnativecode","desc":"Checks if the current function is implemented in the form of native code (implemented in C or runs with generated native code).","params":[{"name":"fn","desc":"The function to check.","lua_type":"(T...) -> U..."}],"returns":[{"desc":"Whether the function is implemented in native code or running with a native code implementation.","lua_type":"boolean"}],"function_type":"static","source":{"line":40,"path":"impl/Libraries/runtime.luau"}},{"name":"can_vm_run_native_code","desc":"Checks if the current Lua(u) VM can run native code.","params":[],"returns":[{"desc":"Whether the VM can run native code.","lua_type":"boolean"}],"function_type":"static","source":{"line":50,"path":"impl/Libraries/runtime.luau"}},{"name":"getstringatom","desc":"Obtains the \'atom\' of the given string `str`.","params":[{"name":"str","desc":"The string to get the atom of.","lua_type":"string"}],"returns":[{"desc":"The atom of str, as a signed 16 bit integer (short/I16/std::int16_t).","lua_type":"number"}],"function_type":"static","source":{"line":62,"path":"impl/Libraries/runtime.luau"}},{"name":"getstringhash","desc":"Obtains the hash of the given string `str` that was assigned to it by Lua(u).","params":[{"name":"str","desc":"The string to get the hash of.","lua_type":"string"}],"returns":[{"desc":"The hash of str, as an unsigned integer.","lua_type":"number"}],"function_type":"static","source":{"line":74,"path":"impl/Libraries/runtime.luau"}},{"name":"enablepointerencoding","desc":"Enables pointer encoding for the Lua(u) VM.\\n\\n\\n:::info Implementation\\nThis function should be implemented as a way to restore the pointer encryption key to the original value, using the key that RBX::ScriptContext contains.\\nWhile any value is acceptable, it is recommended to use the value from RBX::ScriptContext in order to avoid issues.\\n:::","params":[],"returns":[],"function_type":"static","source":{"line":88,"path":"impl/Libraries/runtime.luau"}},{"name":"disablepointerencoding","desc":"Disables pointer encoding for the Lua(u) VM.\\n\\n\\n:::tip Executor Development\\nThis can help locate objects in memory to find out about their true structure in memory.\\n:::","params":[],"returns":[],"function_type":"static","source":{"line":99,"path":"impl/Libraries/runtime.luau"}},{"name":"isinstance","desc":"Returns whether the given object is a userdata of type Instance.\\n\\n\\n:::warning Implementation\\nThis function should **NEVER** be implemented as a __type check. You must figure out a way to do it yourself.\\n:::","params":[{"name":"obj","desc":"The object to check.","lua_type":"userdata"}],"returns":[{"desc":"Whether the object is a `userdata` of type `Instance`.","lua_type":"boolean"}],"function_type":"static","source":{"line":112,"path":"impl/Libraries/runtime.luau"}},{"name":"setluaufflag","desc":"Sets a fast flag in the Lua(u) VM for specific behaviour.\\n\\n\\n:::info Implementation\\nThis functions should affect the Roblox VM as well if you are using a RVM/CLVM execution method.\\n:::","params":[{"name":"flagName","desc":"The name of the flag to set.","lua_type":"string"},{"name":"flagValue","desc":"The value to set the flag to.","lua_type":"boolean"}],"returns":[],"function_type":"static","source":{"line":127,"path":"impl/Libraries/runtime.luau"}},{"name":"disableerrorlogging","desc":"Disables the error logging Roblox does on the VM. This is **NOT** the same as disabling error logging in the VM itself, it simply disables the `ScriptContext.Error` signal.\\n\\n\\n:::info Implementation\\nThis function can be implemented using `hooksignal` or `getconnections`, but it must continue to work ***even*** if new connections are added to the event.\\n:::","params":[],"returns":[],"function_type":"static","source":{"line":138,"path":"impl/Libraries/runtime.luau"}},{"name":"enableerrorlogging","desc":"Enables the error logging Roblox does on the VM. This is **NOT** the same as disabling error logging in the VM itself, it simply enables the `ScriptContext.Error` signal again after being disabled.","params":[],"returns":[],"function_type":"static","source":{"line":144,"path":"impl/Libraries/runtime.luau"}},{"name":"getrbxbuildhash","desc":"Returns the Version hash of the current, running ROBLOX version. The version hash is the hash that follows the \'version\' string in `version-...`.","params":[],"returns":[{"desc":"The ROBLOX build hash.","lua_type":"string"}],"function_type":"static","tags":["Optional"],"source":{"line":153,"path":"impl/Libraries/runtime.luau"}},{"name":"gethwid","desc":"Returns the HWID for the running computer.\\n\\n\\n:::danger HWID Hashing\\nAfter performing your own tool\'s HWID calculations, you are expected to provide a hex-formatted hash that cannot be reconstructed back to the original HWID.\\n:::","params":[],"returns":[{"desc":"The hash of your tool\'s calculated HWID, as a hex string.","lua_type":"string"}],"function_type":"static","source":{"line":166,"path":"impl/Libraries/runtime.luau"}}],"properties":[],"types":[],"name":"runtime","desc":"Contains functions that modify the Lua(u) Virtual Machine runtime.","tags":["Library"],"source":{"line":7,"path":"impl/Libraries/runtime.luau"}}')}}]);