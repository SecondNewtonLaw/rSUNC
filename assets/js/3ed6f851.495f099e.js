"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[773],{10520:e=>{e.exports=JSON.parse('{"functions":[{"name":"cloneref","desc":"Clones a reference of the given instance.\\n\\n\\n:::tip Usage\\nBy cloning references to instances, you can bypass weak table-style attacks, which is a way of detecting references to objects which should not have references.\\n:::","params":[{"name":"object","desc":"The instance to clone.","lua_type":"Instance"}],"returns":[{"desc":"A brand new reference to the given instance.","lua_type":"Instance"}],"function_type":"static","source":{"line":19,"path":"impl/Libraries/instances.luau"}},{"name":"compareinstances","desc":"Compares the underlying instances of two object references.\\n\\n\\n:::tip Usage\\n`instances.cloneref` allows you to clone a reference to an object, this breaks the normal way Roblox performs equality checks.\\n\\nThis function allows you to compare the actual thing the two references point to, allowing you to know if they reference the same instance!\\n:::","params":[{"name":"object1","desc":"The first instance.","lua_type":"Instance"},{"name":"object2","desc":"The second instance.","lua_type":"Instance"}],"returns":[{"desc":"If true, both references point to the same instance, else false.","lua_type":"boolean"}],"function_type":"static","source":{"line":37,"path":"impl/Libraries/instances.luau"}},{"name":"invalidatereference","desc":"Invalidates the reference of the given instance.\\n\\n\\n:::tip Usage\\nInvalidating the reference to an instance allows you to make subsequent calls to certain functions return a different pointer instead of the one you have. This also makes the reference you hold unique to you up to that point.\\n:::","params":[{"name":"object","desc":"The instance to invalidate.","lua_type":"Instance"}],"returns":[],"function_type":"static","errors":[{"lua_type":"The reference cannot be invalidated (not in cache)","desc":"The reference you provided cannot be invalidated, this is due to it not being on the instance cache."}],"source":{"line":52,"path":"impl/Libraries/instances.luau"}},{"name":"isreferencevalid","desc":"Checks if the reference to the given instance is still valid.\\n\\n\\n:::tip Usage\\nThis function is used to check if an instance is still valid after the reference is invalidated using `instances.invalidatereference`.\\n:::","params":[{"name":"object","desc":"The instance to check.","lua_type":"Instance"}],"returns":[{"desc":"If true, the reference to the instance is still valid.","lua_type":"boolean"}],"function_type":"static","source":{"line":65,"path":"impl/Libraries/instances.luau"}},{"name":"replacereference","desc":"Makes all references that are `object1` point to what `object2` is referencing instead.\\n\\n\\n:::tip Usage\\nYou can use this function to replace references to an instance all throughout the game. i.e.: replacing a Value instance and affecting all already obtained references to it.\\n:::\\n\\n:::note Remarks\\nSome instances, such as the DataModel (aka `game`), are not affected by this function.\\n:::","params":[{"name":"object1","desc":"The instance to replace.","lua_type":"Instance"},{"name":"object2","desc":"The instance to replace it with.","lua_type":"Instance"}],"returns":[],"function_type":"static","errors":[{"lua_type":"The reference cannot be modified (not in cache)","desc":"The reference you provided cannot be modified, this is due to it not being on the instance cache."}],"source":{"line":85,"path":"impl/Libraries/instances.luau"}},{"name":"getplaceversion","desc":"Gets the version of the ROBLOX place you are in.\\n\\n\\n:::tip Usage\\nThis function can be used to guarantee features work only on a version deemed \'safe\' of the game. Useful for premium scripts.\\n:::","params":[],"returns":[{"desc":"The version of the place.","lua_type":"number"}],"function_type":"static","source":{"line":97,"path":"impl/Libraries/instances.luau"}},{"name":"getcallbackvalue","desc":"Gets the callback value of the given instance and property.","params":[{"name":"instance","desc":"The instance to get the callback value from.","lua_type":"Instance"},{"name":"prop","desc":"The that is the callback.","lua_type":"string"}],"returns":[{"desc":"The callback that the instance contains at the given property.","lua_type":"(T...) -> U..."}],"function_type":"static","errors":[{"lua_type":"property with name \'%s\' does not exist.","desc":"The given property (named %s) does not exist on the given instance."}],"source":{"line":110,"path":"impl/Libraries/instances.luau"}},{"name":"gethiddenproperty","desc":"Gets the property of the given instance.\\n\\n\\n:::warning Remarks\\nYou must support pushing unserializable properties such as \'`SharedString`\' and \'`SystemAddress`\'.\\n:::\\n\\n:::tip Implementation\\nYou are supposed to obtain the property using the `RBX::Instance::getProperty`/ `RBX::Instance::setProperty` methods. You must not set the property public or scriptable. \\n:::","params":[{"name":"instance","desc":"The instance to get the property from.","lua_type":"T & Instance"},{"name":"prop","desc":"The property to get.","lua_type":"string"}],"returns":[{"desc":"The value of the property.","lua_type":"U"},{"desc":"True if the property was hidden, false if it was not.","lua_type":"boolean"}],"function_type":"static","errors":[{"lua_type":"property with name \'%s\' does not exist.","desc":"The given property (named %s) does not exist on the given instance."}],"source":{"line":132,"path":"impl/Libraries/instances.luau"}},{"name":"getsenv","desc":"Gets the environment of a running script.\\n\\n\\n:::danger Implementation \\nThis function may not perform a GC scan in an effort to find the Script object.\\n:::","params":[{"name":"instance","desc":"The script to obtain the environment of.","lua_type":"LuaSourceContainer"}],"returns":[{"desc":"The environment of the script, nil if the script is not running.","lua_type":"T | nil"}],"function_type":"static","errors":[{"lua_type":"Cannot get the environment of a scipt that runs on the server","desc":"The provided script is with a `RunContext` that is not `RunContext.Client`"}],"source":{"line":147,"path":"impl/Libraries/instances.luau"}},{"name":"getscriptclosure","desc":"Gets a non-runnable closure which holds debug info (constants, upreferences, debugname, etc) of the script\'s main thread.\\n\\n:::danger Implementation \\nThis function may not perform a GC scan in an effort to find the Script object.\\n:::","params":[{"name":"instance","desc":"The script to get the closure of.","lua_type":"LuaSourceContainer"}],"returns":[{"desc":"The \'main\' closure of the script.","lua_type":"(T...) -> U..."}],"function_type":"static","errors":[{"lua_type":"No bytecode found","desc":"The script holds no bytecode."},{"lua_type":"Cannot get closure of a server script","desc":"The script provided is a server script, and its source isn\'t available."}],"source":{"line":162,"path":"impl/Libraries/instances.luau"}}],"properties":[],"types":[],"name":"instances","desc":"Provides functions to manipulate instances.","tags":["Library"],"source":{"line":6,"path":"impl/Libraries/instances.luau"}}')}}]);