"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[718],{69712:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"CompilerCompliance","title":"Luau Compiler Compliance","description":"When compiling bytecode using Luau::compile, the bytecode emitted will contain the GETIMPORTS bytecode instruction.","source":"@site/docs/CompilerCompliance.md","sourceDirName":".","slug":"/CompilerCompliance","permalink":"/rSUNC/docs/CompilerCompliance","draft":false,"unlisted":false,"editUrl":"https://github.com/SecondNewtonLaw/rSUNC/edit/dev/docs/CompilerCompliance.md","tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Index","permalink":"/rSUNC/docs/intro"},"next":{"title":"How can I contribute to rSUNC","permalink":"/rSUNC/docs/HowCanIContribute"}}');var i=n(74848),s=n(28453);const r={},c="Luau Compiler Compliance",l={},a=[{value:"Why is this an issue?",id:"why-is-this-an-issue",level:4}];function d(e){const o={code:"code",h1:"h1",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"luau-compiler-compliance",children:"Luau Compiler Compliance"})}),"\n",(0,i.jsxs)(o.p,{children:["When compiling bytecode using ",(0,i.jsx)(o.code,{children:"Luau::compile"}),", the bytecode emitted will contain the ",(0,i.jsx)(o.code,{children:"GETIMPORTS"})," bytecode instruction.\r\nThis is generally fine on tables that are immutable (meaning they do not change), however globals such as ",(0,i.jsx)(o.code,{children:"workspace"}),", ",(0,i.jsx)(o.code,{children:"game"})," and a few others such as ",(0,i.jsx)(o.code,{children:"script"})," cannot suffer from this behaviour."]}),"\n",(0,i.jsx)(o.h4,{id:"why-is-this-an-issue",children:"Why is this an issue?"}),"\n",(0,i.jsxs)(o.p,{children:["If we inspect ",(0,i.jsx)(o.code,{children:"luau_load"}),", we will see that when it is deserializing and loading the bytecode into memory, they do something tricky on the constants, they have a specific clase called ",(0,i.jsx)(o.code,{children:"LBC_CONSTANT_IMPORT"}),". This is a Luau optimization that attempts to obtain everything a function may need that is known to not change, in order to improve performance. This is great! However, this indirectly inlines properties from globals such as ",(0,i.jsx)(o.code,{children:"game"}),", ",(0,i.jsx)(o.code,{children:"workspace"})," and others. This behaviour is ",(0,i.jsx)(o.strong,{children:"bad"}),"."]}),"\n",(0,i.jsxs)(o.p,{children:["ROBLOX themselves know this is an issue, and have made internally a small list for the compiler to not optimize these on the ",(0,i.jsx)(o.code,{children:"CompilerOptions::mutableGlobals"})," field of the compiler options, which is the following:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-cpp",children:'const char *mutableGlobals[] = {\r\n        "Game", "Workspace", "game", "plugin", "script", "shared", "workspace",\r\n        nullptr\r\n};\n'})}),"\n",(0,i.jsxs)(o.p,{children:["However, rSUNC has its own set of mutable globals which must also be defined on this array to prevent issues, which are the following ",(0,i.jsx)(o.code,{children:"_ENV"}),", ",(0,i.jsx)(o.code,{children:"_GENV"})," and ",(0,i.jsx)(o.code,{children:"_RENV"}),"."]}),"\n",(0,i.jsxs)(o.p,{children:["This also includes Luau optimizations for Vector types, Luau optimizes them properly on Roblox-compiled code as they have already resolved this issue, however we do not have this resolved! In order to allow the Vector3 optimizations to shine we must set the ",(0,i.jsx)(o.code,{children:"CompilerOptions::vectorLib"}),", ",(0,i.jsx)(o.code,{children:"CompilerOptions::vectorCtor"})," and ",(0,i.jsx)(o.code,{children:"CompilerOptions::vectorType"})," to the appropriate values, being ",(0,i.jsx)(o.code,{children:"Vector3"}),", ",(0,i.jsx)(o.code,{children:"new"})," and ",(0,i.jsx)(o.code,{children:"Vector3"}),"."]}),"\n",(0,i.jsxs)(o.p,{children:["We also need to note that you must make use of ",(0,i.jsx)(o.code,{children:"CompilerOptions::optimizationLevel"})," to be of 1 and the ",(0,i.jsx)(o.code,{children:"CompilerOptions::debugLevel"})," to be of 1."]}),"\n",(0,i.jsx)(o.p,{children:"In summary, we must make our compiler play nice with ROBLOX, as well as with our types. This concludes on a simple CompileLuau function."}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-cpp",children:'std::string CompileLuau(std::string_view szLuauCode) {\r\n    const char *mutableGlobals[] = {\r\n            "Game", "Workspace", "game", "plugin", "script", "shared", "workspace",\r\n            "_ENV", "_GENV", "_RENV", // rSUNC globals.\r\n            nullptr\r\n    };\r\n\r\n    auto compileOpts = Luau::CompileOptions { };\r\n    compileOpts.optimizationLevel = 1;\r\n    compileOpts.debugLevel = 1;\r\n    compileOpts.vectorLib = "Vector3";\r\n    compileOpts.vectorCtor = "new";\r\n    compileOpts.vectorType = "Vector3";\r\n    compileOpts.mutableGlobals = mutableGlobals;\r\n    return Luau::compile(szLuauCode.data(), compileOpts, {}, BYTECODE_ENCODER /* Studio requires no bytecode encoder! */);\r\n}\n'})}),"\n",(0,i.jsx)(o.p,{children:"This function contains all elements required to have your compiler be rSUNC compliant."})]})}function p(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>c});var t=n(96540);const i={},s=t.createContext(i);function r(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);